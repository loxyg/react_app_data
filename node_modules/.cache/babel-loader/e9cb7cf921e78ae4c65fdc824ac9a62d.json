{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugues Bernarde\\\\Documents\\\\Ecole\\\\Cours\\\\Web School\\\\M1\\\\Tech\\\\react\\\\React-workshop-main\\\\src\\\\components\\\\EditPost.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState, useEffect } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport Field from '../private/Field';\nimport ImageGalleryPicker from './ImageGalleryPicker';\nimport { getPost } from '../api/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst formReducer = (state, event) => {\n  return { ...state,\n    [event.name]: event.value\n  };\n};\n\nconst EditPost = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [showPictureModal, setShowPictureModal] = useState(false);\n  const [formData, setFormData] = useReducer(formReducer, {});\n  let {\n    id\n  } = useParams(); // post id from url\n\n  console.log('id', id);\n  const navigate = useNavigate(); // create a navigate function instance\n\n  async function _getPost(id) {\n    const data = await getPost(id);\n    convertToFormData(data);\n  }\n\n  async function _getPost(id) {\n    const data = await getPost(id);\n    convertToFormData(data);\n  }\n\n  useEffect(() => {\n    // Chaque fois que l'id change\n    _getPost(Number(id));\n  }, [id]);\n\n  function handleModalPictureSubmit(picture) {\n    setFormData({\n      name: 'postImageUrl',\n      value: picture.src\n    });\n  }\n\n  async function handleAddOrCreatePost(event) {\n    // remove default reloading page\n    event.preventDefault(); // back to Home\n\n    navigate('/');\n  }\n\n  async function handleDeletePost() {\n    // back to Home\n    navigate('/');\n  }\n\n  function handleChange(event) {\n    //\n    const value = event.target.name === 'userId' ? Number(event.target.value) : event.target.value;\n    setFormData({\n      name: event.target.name,\n      value\n    });\n  }\n\n  function convertToFormData(post) {\n    // helper to convert post data into formData\n    // use it before set formData with API data\n    // ex: convertToFormData(data):\n    ;\n    Object.keys(post).map(key => {\n      setFormData({\n        name: key,\n        value: post[key]\n      });\n    });\n  }\n\n  function handleToggleModal() {\n    // Show & Hide picture modal\n    setShowPictureModal(s => !s);\n  }\n\n  function getSelectedPicture() {\n    // prevent bad request and use a placeholder if no data\n    if (formData.postImageUrl) {\n      return formData.postImageUrl;\n    } else {\n      return 'https://via.placeholder.com/320/810b14';\n    }\n  }\n\n  function getSelectedAuthor() {\n    // prevent bad request and use a placeholder if no data\n    if (formData.userId) {\n      // [WORK]\n      // You need to find the author name with the server\n      return formData.userId;\n    } else {\n      return 'Unknown author';\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"post-form\",\n      onSubmit: handleAddOrCreatePost,\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        label: \"Title\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onBlur: handleChange,\n          name: \"title\",\n          onChange: handleChange,\n          className: \"input\",\n          type: \"text\",\n          placeholder: \"Text input\",\n          value: formData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Content\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onBlur: handleChange,\n          name: \"body\",\n          onChange: handleChange,\n          className: \"textarea\",\n          placeholder: \"e.g. Hello world\",\n          value: formData.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Post creator\",\n        children: !!!id ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select\",\n          defaultValue: formData.userId,\n          children: users.length > 0 && /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"userId\",\n            onChange: handleChange,\n            defaultValue: users[0].id,\n            children: users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: user.id,\n              children: user.name\n            }, user.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n          children: getSelectedAuthor()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Post Picture\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          value: \"1\",\n          name: \"postImageID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: getSelectedPicture()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"button is-primary\",\n            onClick: handleToggleModal,\n            children: \"Open picker modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), !!id && /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Extra actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"button is-warning\",\n          onClick: handleDeletePost,\n          children: \"Delete post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field is-grouped is-grouped-centered\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"button is-primary\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"control\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"button is-light\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), showPictureModal && /*#__PURE__*/_jsxDEV(ImageGalleryPicker, {\n      onClose: handleToggleModal,\n      onSubmit: handleModalPictureSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditPost, \"YI2369moav4dZaQNUmg5VCc3Z9w=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = EditPost;\nexport default EditPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"sources":["C:/Users/Hugues Bernarde/Documents/Ecole/Cours/Web School/M1/Tech/react/React-workshop-main/src/components/EditPost.tsx"],"names":["React","useReducer","useState","useEffect","Link","useNavigate","useParams","Field","ImageGalleryPicker","getPost","formReducer","state","event","name","value","EditPost","users","setUsers","showPictureModal","setShowPictureModal","formData","setFormData","id","console","log","navigate","_getPost","data","convertToFormData","Number","handleModalPictureSubmit","picture","src","handleAddOrCreatePost","preventDefault","handleDeletePost","handleChange","target","post","Object","keys","map","key","handleToggleModal","s","getSelectedPicture","postImageUrl","getSelectedAuthor","userId","title","body","length","user"],"mappings":"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","sourcesContent":["import React, { useReducer, useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { Picker_Picture, Post, PostContent, User } from '../api/types'\nimport Field from '../private/Field'\nimport ImageGalleryPicker from './ImageGalleryPicker'\nimport { getPost } from '../api/post'\n\ntype FormEvent =\n    | React.ChangeEvent<HTMLTextAreaElement>\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>\n\ntype FormData = { name: string; value: string | number | undefined }\n\nconst formReducer = (state: Post | PostContent, event: FormData) => {\n    return {\n        ...state,\n        [event.name]: event.value,\n    }\n}\n\nconst EditPost = () => {\n    const [users, setUsers] = useState<Array<User>>([])\n    const [showPictureModal, setShowPictureModal] = useState<boolean>(false)\n    const [formData, setFormData] = useReducer(\n        formReducer,\n        {} as Post | PostContent\n    )\n    let { id } = useParams() // post id from url\n\n    console.log('id', id)\n    const navigate = useNavigate() // create a navigate function instance\n\n    async function _getPost(id:number){\n        const data= await getPost(id);\n        convertToFormData(data);\n    }\n\n    async function _getPost(id:number){\n        const data= await getPost(id);\n        convertToFormData(data);\n    }\n\n    useEffect(() =>{\n        // Chaque fois que l'id change\n        _getPost(Number(id));\n    },[id]);\n\n    function handleModalPictureSubmit(picture: Picker_Picture) {\n        setFormData({\n            name: 'postImageUrl',\n            value: picture.src,\n        })\n    }\n\n    async function handleAddOrCreatePost(\n        event: React.FormEvent<HTMLFormElement>\n    ) {\n        // remove default reloading page\n        event.preventDefault()\n\n        // back to Home\n        navigate('/')\n    }\n\n    async function handleDeletePost() {\n        // back to Home\n        navigate('/')\n    }\n\n    function handleChange(event: FormEvent) {\n        //\n        const value =\n            event.target.name === 'userId'\n                ? Number(event.target.value)\n                : event.target.value\n        setFormData({\n            name: event.target.name,\n            value,\n        })\n    }\n\n    function convertToFormData(post: Post): void {\n        // helper to convert post data into formData\n        // use it before set formData with API data\n        // ex: convertToFormData(data):\n        ;(Object.keys(post) as Array<keyof typeof post>).map((key) => {\n            setFormData({\n                name: key,\n                value: post[key],\n            })\n        })\n    }\n\n    function handleToggleModal() {\n        // Show & Hide picture modal\n        setShowPictureModal((s) => !s)\n    }\n\n    function getSelectedPicture() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.postImageUrl) {\n            return formData.postImageUrl\n        } else {\n            return 'https://via.placeholder.com/320/810b14'\n        }\n    }\n\n    function getSelectedAuthor() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.userId) {\n            // [WORK]\n            // You need to find the author name with the server\n            return formData.userId\n        } else {\n            return 'Unknown author'\n        }\n    }\n\n    return (\n        <>\n            <form className=\"post-form\" onSubmit={handleAddOrCreatePost}>\n                <Field label=\"Title\">\n                    <input\n                        onBlur={handleChange}\n                        name=\"title\"\n                        onChange={handleChange}\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Text input\"\n                        value={formData.title}\n                    />\n                </Field>\n                <Field label=\"Content\">\n                    <textarea\n                        onBlur={handleChange}\n                        name=\"body\"\n                        onChange={handleChange}\n                        className=\"textarea\"\n                        placeholder=\"e.g. Hello world\"\n                        value={formData.body}\n                    />\n                </Field>\n                <Field label=\"Post creator\">\n                    {!!!id ? (\n                        <div className=\"select\" defaultValue={formData.userId}>\n                            {users.length > 0 && (\n                                <select\n                                    name=\"userId\"\n                                    onChange={handleChange}\n                                    defaultValue={users[0].id}\n                                >\n                                    {users.map((user) => (\n                                        <option key={user.id} value={user.id}>\n                                            {user.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    ) : (\n                        <label>{getSelectedAuthor()}</label>\n                    )}\n                </Field>\n\n                <Field label=\"Post Picture\">\n                    <input type=\"hidden\" value=\"1\" name=\"postImageID\" />\n                    <div>\n                        <img src={getSelectedPicture()} />\n                        <button\n                            type=\"button\"\n                            className=\"button is-primary\"\n                            onClick={handleToggleModal}\n                        >\n                            Open picker modal\n                        </button>\n                    </div>\n                </Field>\n\n                {!!id && (\n                    <Field label=\"Extra actions\">\n                        <button\n                            type=\"button\"\n                            className=\"button is-warning\"\n                            onClick={handleDeletePost}\n                        >\n                            Delete post\n                        </button>\n                    </Field>\n                )}\n\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <p className=\"control\">\n                        <button type=\"submit\" className=\"button is-primary\">\n                            Submit\n                        </button>\n                    </p>\n                    <p className=\"control\">\n                        <Link to=\"/\" className=\"button is-light\">\n                            Cancel\n                        </Link>\n                    </p>\n                </div>\n            </form>\n            {showPictureModal && (\n                <ImageGalleryPicker\n                    onClose={handleToggleModal}\n                    onSubmit={handleModalPictureSubmit}\n                />\n            )}\n        </>\n    )\n}\n\nexport default EditPost\n"]},"metadata":{},"sourceType":"module"}